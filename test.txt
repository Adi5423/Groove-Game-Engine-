Renderer.cpp
```
#include "Renderer.h"
#include "Shader.h"
#include "../Utils/Logger.h"
#include <glad/glad.h>
#include <Transform.h>
#include <Camera.h>

// Cube: 8 vertices, 36 indices (12 triangles)
static float cubeVerts[] = {
    // positions          
    -0.5f,-0.5f,-0.5f,  0.5f,-0.5f,-0.5f,  0.5f, 0.5f,-0.5f, -0.5f, 0.5f,-0.5f,
    -0.5f,-0.5f, 0.5f,  0.5f,-0.5f, 0.5f,  0.5f, 0.5f, 0.5f, -0.5f, 0.5f, 0.5f,
};
static unsigned int cubeIndices[] = {
    0,1,2, 2,3,0,  // back face
    4,5,6, 6,7,4,  // front face
    4,5,1, 1,0,4,  // bottom
    6,7,3, 3,2,6,  // top
    4,0,3, 3,7,4,  // left
    1,5,6, 6,2,1   // right
};

// Inline GLSL sources (replace existing ones)
static const char* vertexSrc = R"(
#version 450 core

layout(location = 0) in vec3 aPos;

uniform mat4 u_Model;
uniform mat4 u_View;
uniform mat4 u_Proj;

void main()
{
    // Transform into clip space
    gl_Position = u_Proj * u_View * u_Model * vec4(aPos, 1.0);
}
)";

static const char* fragmentSrc = R"(
#version 450 core

out vec4 FragColor;

void main()
{
    // Simple solid color
    FragColor = vec4(0.9, 0.3, 0.4, 1.0);
}
)";


namespace Groove {

    unsigned int Renderer::s_VAO = 0;
    unsigned int Renderer::s_VBO = 0;
    Shader* Renderer::s_Shader = nullptr;


    void Renderer::Init() {
        Logger::Info("Renderer initializing...");
        glEnable(GL_DEPTH_TEST);


        // Create and bind VAO
        // In Init(): generated VAO/VBO/IBO instead of just VBO
        unsigned int IBO;
        glGenVertexArrays(1, &s_VAO);
        glBindVertexArray(s_VAO);

        glGenBuffers(1, &s_VBO);
        glBindBuffer(GL_ARRAY_BUFFER, s_VBO);
        glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVerts), cubeVerts, GL_STATIC_DRAW);

        glGenBuffers(1, &IBO);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(cubeIndices), cubeIndices, GL_STATIC_DRAW);

        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);

        // Enable vertex attribute 0 (position)
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);

        // Create shader
        s_Shader = new Shader(vertexSrc, fragmentSrc);
        s_Shader->Bind();

        Logger::Info("Renderer initialized.");
    }

    void Renderer::DrawCube(const Transform& t, const Camera& cam) {
        s_Shader->Bind();
        // set uniforms
        s_Shader->SetUniformMat4f("u_Model", t.GetMatrix());
        s_Shader->SetUniformMat4f("u_View", cam.GetViewMatrix());
        s_Shader->SetUniformMat4f("u_Proj", cam.GetProjectionMatrix());
        glBindVertexArray(s_VAO);
        glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, nullptr);
    }

    void Renderer::SetCameraPerspective(Camera& cam, float aspect) {
        cam.SetPerspective(glm::radians(45.0f), aspect, 0.1f, 100.0f);
    }

    void Renderer::Shutdown() {
        delete s_Shader;
        glDeleteVertexArrays(1, &s_VAO);
        glDeleteBuffers(1, &s_VBO);
        Logger::Info("Renderer shutdown.");
    }


}
```
Camera.cpp
```
#include "Camera.h"
#include <glm/gtc/matrix_transform.hpp>

namespace Groove {

    Camera::Camera(float fovY, float aspect, float nearClip, float farClip) {
        m_Projection = glm::perspective(glm::radians(fovY), aspect, nearClip, farClip);
        UpdateCameraVectors();
    }

    void Camera::ProcessKeyboard(const glm::vec3& dir, float deltaTime) {
        float velocity = m_MovementSpeed * deltaTime;
        m_Position += m_Front * dir.z * velocity;
        m_Position += m_Right * dir.x * velocity;
        m_Position += m_Up * dir.y * velocity;
    }

    void Camera::ProcessMouseMovement(float deltaX, float deltaY, bool constrainPitch) {
        deltaX *= m_MouseSensitivity;
        deltaY *= m_MouseSensitivity;
        m_Yaw += deltaX;
        m_Pitch += deltaY;
        if (constrainPitch) {
            if (m_Pitch > 89.0f) m_Pitch = 89.0f;
            if (m_Pitch < -89.0f) m_Pitch = -89.0f;
        }
        UpdateCameraVectors();
    }

    glm::mat4 Camera::GetViewMatrix() const {
        return glm::lookAt(m_Position, m_Position + m_Front, m_Up);
    }

    glm::mat4 Camera::GetProjectionMatrix() const {
        return m_Projection;
    }

    void Camera::UpdateCameraVectors() {  
        glm::vec3 front{0.0f, 0.0f, 0.0f}; // Initialize the local variable 'front'  
        front.x = cos(glm::radians(m_Yaw)) * cos(glm::radians(m_Pitch));  
        front.y = sin(glm::radians(m_Pitch));  
        front.z = sin(glm::radians(m_Yaw)) * cos(glm::radians(m_Pitch));  
        m_Front = glm::normalize(front);  
        m_Right = glm::normalize(glm::cross(m_Front, m_WorldUp));  
        m_Up = glm::normalize(glm::cross(m_Right, m_Front));  
    }

}
```

Engine.cpp
```
// engine/src/Engine.cpp

#include "Engine.h"
#include "Window.h"
#include "TimeStep.h"
#include "../Renderer/Renderer.h"
#include "../Utils/Logger.h"
#include "../Input/Input.h"
#include "../Renderer/ImGuiLayer.h"
#include "Camera.h"
#include "Transform.h"

#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <imgui.h> // Ensure ImGui is included for ImGui::Begin/End/Text

static Groove::Window* s_Window = nullptr;
static Groove::ImGuiLayer* s_ImGuiLayer = nullptr;

// Updated: m_Camera as static at file-scope
static Groove::Camera* m_Camera = nullptr;

void Engine::Init() {
    Groove::Logger::Init("Groove.log");
    s_Window = new Groove::Window(1280, 720, "Groove Engine");
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        Groove::Logger::Error("Failed to initialize GLAD!");
        return;
    }
    Groove::Input::Init(static_cast<GLFWwindow*>(s_Window->GetNativeWindow()));
    Groove::Renderer::Init();

    // Aspect ratio = width/height
    m_Camera = new Groove::Camera(45.0f, 1280.0f / 720.0f, 0.1f, 100.0f);

    s_ImGuiLayer = new Groove::ImGuiLayer();
    s_ImGuiLayer->Init(static_cast<GLFWwindow*>(s_Window->GetNativeWindow()));

    // Lock the cursor to the window
    GLFWwindow* glfwWin = static_cast<GLFWwindow*>(s_Window->GetNativeWindow());
    glfwSetInputMode(glfwWin, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
}

void Engine::Run() {
    Groove::Logger::Info("Entering main loop...");

    float lastTime = (float)glfwGetTime();

    Groove::Transform cubeTransform;

    GLFWwindow* glfwWin = static_cast<GLFWwindow*>(s_Window->GetNativeWindow());
    while (!glfwWindowShouldClose(glfwWin)) {
        float currentTime = (float)glfwGetTime();
        float deltaTime = currentTime - lastTime;
        lastTime = currentTime;

        // Unlock the cursor if Escape is pressed
        if (Groove::Input::IsKeyPressed(GLFW_KEY_ESCAPE)) {
            glfwSetInputMode(glfwWin, GLFW_CURSOR, GLFW_CURSOR_NORMAL);
        }

        // 1) Handle keyboard input for camera movement
        glm::vec3 direction{0.0f};
        if (Groove::Input::IsKeyPressed(GLFW_KEY_W)) direction.z += 1.0f;
        if (Groove::Input::IsKeyPressed(GLFW_KEY_S)) direction.z -= 1.0f;
        if (Groove::Input::IsKeyPressed(GLFW_KEY_A)) direction.x -= 1.0f;
        if (Groove::Input::IsKeyPressed(GLFW_KEY_D)) direction.x += 1.0f;
        if (Groove::Input::IsKeyPressed(GLFW_KEY_SPACE)) direction.y += 1.0f;
        if (Groove::Input::IsKeyPressed(GLFW_KEY_LEFT_CONTROL)) direction.y -= 1.0f;
        m_Camera->ProcessKeyboard(direction, deltaTime);

        // 2) Handle mouse input for camera rotation
        double dx, dy;
        Groove::Input::GetMouseDelta(dx, dy);
        m_Camera->ProcessMouseMovement((float)dx, (float)dy);

        // 3) Render
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        cubeTransform.Rotation.y += deltaTime * 50.0f; // 50Â° per sec

        Groove::Renderer::DrawCube(cubeTransform, *m_Camera);

        s_ImGuiLayer->Begin();

        ImGui::Begin("Groove Engine");
        ImGui::Text("Hello from ImGui!");
        ImGui::End();

        s_ImGuiLayer->End();

        s_Window->OnUpdate();
    }
}

void Engine::Shutdown() {
    s_ImGuiLayer->Shutdown();
    delete s_ImGuiLayer;
    Groove::Renderer::Shutdown();
    delete s_Window;
    delete m_Camera; // Clean up camera
    Groove::Logger::Info("Shutdown complete.");
    Groove::Logger::Shutdown();
}
```

